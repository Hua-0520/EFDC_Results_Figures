, units = 'in'
, res = 600)
pairs.panels(dat_secc_wl_precip_log
, method = 'spearman'
, lm = T
, hist.color = 'black')
dev.off(dev.cur())
#Write tables--------------------------------------------------------------
setwd(wd_output)
#Correlations and p-values with secchi depth
write.csv(result_secc_wl_precip_pwc
, file = 'Growing_Season_Spearman_Correlation_Result_Epilimnion_with_Secchi_WL_Precip_PWC_Ramsey_Co_Corrected.csv')
write.csv(p_val_secc_wl_precip_pwc
, file = 'Growing_Season_Spearman_Correlation_P-Val_Epilimnion_with_Secchi_WL_Precip_PWC_Ramsey_Co_Corrected.csv')
write.csv(result_secc_wl_precip_pwc_log
, file = 'Growing_Season_Spearman_Correlation_Result_Epilimnion_with_Secchi_WL_Precip_PWC_log_Ramsey_Co_Corrected.csv')
write.csv(p_val_secc_wl_precip_pwc_log
, file = 'Growing_Season_Spearman_Correlation_P-Val_Epilimnion_with_Secchi_WL_Precip_PWC_log_Ramsey_Co_Corrected.csv')
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyr)
library(stringr)
library(readxl)
library(rattle) #Exclusively for normVarNames()
library(Kendall) #for stats
library(zyp) #Sen's slope
library(trend)
library(psych)
#Notes------------------------------------------
##08-19-16
##This script is for generating exploratory plots
##outlined by DDL in 08-18-16 email
#Working directories----------------------------
wd_data <- c('S:/CRWDCOMO/DATA/Chemistry')
wd_precip <- c('S:/CRWDCOMO/DATA/Precipitation')
wd_wl <- c('S:/CRWDCOMO/DATA/Lake Level')
wd_output <- c('S:/CRWDCOMO/DATA/02_Data_Analysis/Exploratory_Plots/22_Spearman_Correlation_Table/Whole_Lake_Correlations')
#User-defined variables-----------------------
##Data file
data_file <- c('Como Lake WQ-Chem_1984-2015.csv')
#Load Functions-----------------------
setwd('S:/CRWDCOMO/DATA/02_Data_Analysis/R_Scripts')
source('CRWDCOMO_Functions.R')
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
#Load, reformat, clean chemistry data-----------------------------------
setwd('S:/CRWDCOMO/DATA/02_Data_Analysis/R_Scripts')
source('00_Basic_Data_Format_Corrected_Version.R')
wide_dat <- wide_dat %>% filter(site == 201)
wide_dat$soluble_reactive_phosphorus_mg_l[wide_dat$soluble_reactive_phosphorus_mg_l == ''] <- NA
wide_dat$nitrogen_ammonia_mg_l[wide_dat$nitrogen_ammonia_mg_l == ''] <- NA
dat <- wide_dat
dat[ , 7:27] <- lapply(dat[ , 7:27], nd_remover) %>% unlist(.)
#Substitute DL for ND values
dat_long <- gather(wide_dat, parameter, result_text, 7:27)
dat_long$result <- lapply(dat_long$result_text, nd_remover) %>% unlist(.)
dat_long$nd_value <- lapply(dat_long$result_text, nd_classifier) %>% unlist(.)
#Load reformat, clean precip and WL data--------------------------------
setwd(wd_precip)
precip <- read.csv(file = 'UMN_15_Minute_Precip_Totals_2005-2016.csv'
, header = T
, stringsAsFactors = F)
names(precip) <- normVarNames(names(precip))
precip$date <- mdy(precip$date)
# precip <- precip %>% filter(month(date) >= 5, month(date) <= 9)
precip_daily_total <- precip %>%
group_by(sample_date = date) %>%
summarise(daily_precip_in = sum(precipitation_in))
setwd(wd_wl)
wl <- read.csv(file = 'Como_Lake_Level_1978-2016.csv'
, header = T
, stringsAsFactors = F)
names(wl) <- normVarNames(names(wl))
wl$date <- mdy(wl$date_read)
# wl <- wl %>% filter(month(date) >= 5, month(date) <= 9)
wl_daily_avg <- wl %>%
group_by(sample_date = date) %>%
summarise(wl_avg_ft = mean(elevation))
#Calculate daily average for both strata combined and spread the data------------
dat_daily_avg <- dat_long %>%
group_by(sample_date, epilimnetic_sample, parameter) %>%
summarise(result_avg = mean(result, na.rm = T))
dat_daily_avg <- spread(dat_daily_avg, parameter, result_avg)
dat_secchi <- wide_dat %>% select(sample_date, secchi_disk_depth_m) %>%
filter(!is.na(secchi_disk_depth_m))
dat_secc_wl_precip <- dat_daily_avg %>% select(1:2
, total_phosphorus_mg_l
, chlorophyll_a_pheo_corrected_ug_l
, total_kjeldahl_nitrogen_mg_l
, nitrogen_ammonia_mg_l
, soluble_reactive_phosphorus_mg_l
, oxygen_dissolved_mg_l
, water_temperature_c
, water_turbidity_ntu
, conductivity_m_s_cm
, chloride_mg_l) %>%
left_join(., dat_secchi) %>%
left_join(., precip_daily_total) %>%
left_join(., wl_daily_avg)
#Spearman correlation test with p values
corr_test_secc_wl_precip_pwc <- corr.test(x = dat_secc_wl_precip[ , 3:15]
, y = dat_secc_wl_precip[ , 3:15]
, method = 'spearman'
, use = 'pairwise.complete.obs')
p_val_secc_wl_precip_pwc <- data.frame(corr_test_secc_wl_precip_pwc$p)
result_secc_wl_precip_pwc <- data.frame(corr_test_secc_wl_precip_pwc$r)
#Log transform data and perform Spearman again
dat_secc_wl_precip_log <- log(dat_secc_wl_precip[ , 3:15])
corr_test_secc_wl_precip_pwc_log <- corr.test(x = dat_secc_wl_precip_log
, y = dat_secc_wl_precip_log
, method = 'spearman'
, use = 'pairwise.complete.obs')
p_val_secc_wl_precip_pwc_log <- data.frame(corr_test_secc_wl_precip_pwc_log$p)
result_secc_wl_precip_pwc_log <- data.frame(corr_test_secc_wl_precip_pwc_log$r)
#Correlation plots-------------------------------------------------------
setwd(wd_output)
log_lake <- pairs(dat_secc_wl_precip_log)
lake <- dat_secc_wl_precip[, 3:15]
png(filename = 'Epilimnion_Correlation_Plot_WL_Precip_Ramsey_Co_Corrected.png'
, height = 24, width = 24
, units = 'in'
, res = 600)
pairs.panels(lake
, method = 'spearman'
, lm = T
, hist.color = 'black')
dev.off(dev.cur())
png(filename = 'Log_Epilimnion_Correlation_Plot_WL_Precip_Ramsey_Co_Corrected.png'
, height = 24, width = 24
, units = 'in'
, res = 600)
pairs.panels(dat_secc_wl_precip_log
, method = 'spearman'
, lm = T
, hist.color = 'black')
dev.off(dev.cur())
#Write tables--------------------------------------------------------------
setwd(wd_output)
#Correlations and p-values with secchi depth
write.csv(result_secc_wl_precip_pwc
, file = 'Spearman_Correlation_Result_Whole_Lake_with_Secchi_WL_Precip_PWC_Ramsey_Co_Corrected.csv')
write.csv(p_val_secc_wl_precip_pwc
, file = 'Spearman_Correlation_P-Val_Whole_Lake_with_Secchi_WL_Precip_PWC_Ramsey_Co_Corrected.csv')
write.csv(result_secc_wl_precip_pwc_log
, file = 'Spearman_Correlation_Result_Whole_Lake_with_Secchi_WL_Precip_PWC_log_Ramsey_Co_Corrected.csv')
write.csv(p_val_secc_wl_precip_pwc_log
, file = 'Spearman_Correlation_P-Val_Whole_Lake_with_Secchi_WL_Precip_PWC_log_Ramsey_Co_Corrected.csv')
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyr)
library(stringr)
library(readxl)
library(rattle) #Exclusively for normVarNames()
library(Kendall) #for stats
library(zyp) #Sen's slope
library(trend)
#Notes------------------------------------------
##08-19-16
##This script is for generating exploratory plots
##outlined by DDL in 08-18-16 email
#Working directories----------------------------
wd_data <- c('S:/CRWDCOMO/DATA/Chemistry')
wd_out <- c('S:/CRWDCOMO/DATA/02_Data_Analysis/Exploratory_Plots')
# wd_profiles <- paste(wd_out, '/01_DO_temp_profiles', sep = '')
# wd_scatter <- paste(wd_out, '/02_nutrient_scatter_by_year', sep = '')
# wd_median <-paste(wd_out, '/03_median_annual_plot', sep = '')
# wd_boxplot <- paste(wd_out, '/04_boxplots', sep = '')
wd_loess <- paste(wd_out, '/21_MK_Monotonic_Growing_Season', sep = '')
wd_loess_subset <- c('S:/CRWDCOMO/DATA/02_Data_Analysis/Exploratory_Plots/05_loess_curves_and_stats/loess_subset_yr')
#User-defined variables-----------------------
##Data file
data_file <- c('Como Lake WQ-Chem_1984-2015.csv')
##Stations of interest
stations <- c(5401, 201)
##Time period of interest (start year, end year)
time_period <- c(2010, 2016)
#Load Functions-----------------------
setwd('S:/CRWDCOMO/DATA/02_Data_Analysis/R_Scripts')
source('CRWDCOMO_Functions.R')
#Load data, reformat, clean-----------------------
setwd('S:/CRWDCOMO/DATA/02_Data_Analysis/R_Scripts')
source('00_Basic_Data_Format_Corrected_Version.R')
#Analysis specific formatting
##Reformat data into a ggplot friendly format
dat <- gather(wide_dat, parameter, result_text, 7:27)
##Remove values where 'result' == NA
###the dataset seems to have blank values in addition to NA values
###Verify # of records remaining in dat after with the number of records in the
###original spreadsheet
dat <- dat[!(is.na(dat$result) | dat$result == ''), ]
##Remove "<" and flag value as ND
dat$result <- lapply(dat$result_text, nd_remover) %>% unlist(.)
dat$nd_value <- lapply(dat$result_text, nd_classifier) %>% unlist(.)
#Filter data for plotting------------------------------------
#Add date based factors for plotting
# dat_profile$sample_date <- mdy(dat_profile$sample_date)
dat$year_fac <- date_factor(dat$sample_date, "year")
dat$month_fac <- date_factor(dat$sample_date, "month")
dat$date_fac <- as.factor(format(dat$sample_date, '%m/%d/%Y'))
dat$param_fac <- as.factor(dat$parameter)
dat$strata <- ifelse(dat$epilimnetic_sample == '1', 'Epilimnion', 'Hypolimnion')
params <- unique(dat$parameter)
##Add plotting information to the dat dataframe
par_plot <- c('Dissolved Oxygen', 'Water Temperature', 'Secchi Disk Depth'
, 'Chlorophyll-a', 'Total Phosphorus', 'Soluble Reative Phosphorus (SRP)'
, 'Total Particulate Matter', 'Organic Particulate Matter'
, 'pH', 'Water Turbidity', 'Chloride', 'Total Alkalinity', 'Hardness'
, 'Conductivity', 'Nitrate', 'Ammonia', 'Total Kjeldahl Nitrogen (TKN)'
, 'Total Iron', 'Ferrous Iron', 'Total Nitrogen', 'TN:TP Ratio') %>%
as.character(.)
unit_plot <- c('mg/L', 'C', 'm', 'ug/L', 'mg/L', 'mg/L', 'mg/L', 'mg/L'
, 's.u.', 'NTU', 'mg/L', 'mg/L', 'mg/L', 'mS/cm', 'mg/L', 'mg/L'
, 'mg/L', 'mg/L', 'ug/L', 'mg/L', 'Unitless')
par_df <- data.frame(parameter = params
, par_plot = par_plot
, unit_plot = unit_plot
, stringsAsFactors = F)
dat <- left_join(dat, par_df)
#Add field for month names and reorder the factor levels
dat$month_nm_fac <- month.abb[month(dat$sample_date)] %>% as.factor(.)
dat$month_nm_fac <- factor(dat$month_nm_fac, levels = month.abb)
#Back-up of all the data
dat_all <- dat %>% filter(site %in% stations)
dat_all$param_strata <- paste(dat_all$parameter, '_', dat_all$epilimnetic_sample, sep = '')
# #Filter for years of interest
# dat <- dat %>% filter(site %in% stations
#                       , year(sample_date) <= max(time_period)
#                       , year(sample_date) >= min(time_period)
# )
#Summary table----------------------------------------------
#dplyr
##Dat summary includes all stations
dat_summary <- dat %>% group_by(parameter, strata) %>%
dplyr::summarise(count = n()
, min = min(result)
, max = max(result)
, nd_count = length(which(nd_value == 'ND'))
)
#Task 05 data prep-------------------------------------
setwd(wd_loess)
params_loess <- c('secchi_disk_depth_m'
, 'water_turbidity_ntu'
, 'chlorophyll_a_pheo_corrected_ug_l_1'
, 'soluble_reactive_phosphorus_mg_l_1'
, 'soluble_reactive_phosphorus_mg_l_0'
, 'total_phosphorus_mg_l_1'
, 'total_phosphorus_mg_l_0'
, 'nitrogen_ammonia_mg_l_1'
, 'nitrogen_ammonia_mg_l_0'
, 'total_kjeldahl_nitrogen_mg_l_1'
, 'total_kjeldahl_nitrogen_mg_l_0'
, 'nitrate_mg_l_1'
, 'nitrate_mg_l_0'
, 'chloride_mg_l_1'
, 'chloride_mg_l_0'
, 'water_temperature_c_1'
, 'water_temperature_c_0')
params_ttl <- c('Secchi Disk Depth (m)'
, 'Turbidity (NTU)'
, 'Epilimnetic Chlorophyll-a (ug/L)'
, 'Epilimnetic Soluble Reactive Phosphorus (mg/L)'
, 'Hypolimnetic Soluble Reactive Phosphorus (mg/L)'
, 'Epilimnetic Total Phosphorus (mg/L)'
, 'Hypolimnetic Total Phosphorus (mg/L)'
, 'Epilimnetic Ammonia (mg/L)'
, 'Hypolimnetic Ammonia (mg/L)'
, 'Epilimnetic Total Kjeldahl Nitrogen (mg/L)'
, 'Hypolimnetic Total Kjeldahl Nitrogen (mg/L)'
, 'Epilimnetic Nitrate (mg/L)'
, 'Hypolimnetic Nitrate (mg/L)'
, 'Epilimnetic Chloride (mg/L)'
, 'Hypolimnetic Chloride (mg/L)'
, 'Surface Water Temperature (C)'
, 'Hypolimnetic Water Temperature (C)'
)
filter_vec <- c(NA, NA, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0)
subset_yr <- 2005
dat_loess <- dat_all %>% filter(parameter %in% params[c(3, 10, 4, 5, 6, 15, 16, 17, 11, 2)])
#Adapted from Task 05b in 'Task_01-07_Exploratory_Plots-------------------------------------------
setwd(wd_loess)
##Mann-Kendall test for monotonic trend
##WARNING: THIS DATA IS AUTOCORRELATED, SO M-K IS NOT THE APPROPRIATE TEST
#Dim a new vector
df_mk_results <- data.frame(matrix(nrow = 2 * length(params_loess), ncol = 8))
names(df_mk_results) <- c('parameter', 'time_period', 'month period', 'tau', 'p_val_two_sided'
, 'sens_slope', 'ci_lower', 'ci_upper')
for (i in 1:length(params_loess)) {
if(is.na(filter_vec[i])) {
df <- dat_loess %>% filter(parameter == params_loess[i]) %>%
group_by(sample_date) %>%
dplyr::summarise(daily_avg = mean(result))
} else if(params_loess[i] == 'water_temperature_c_1') {
df <- dat_loess %>% filter(parameter == 'water_temperature_c', epilimnetic_sample == 1, sample_depth == 0) %>%
group_by(sample_date) %>%
dplyr::summarise(daily_avg = mean(result))
} else {
df <- dat_loess %>% filter(param_strata == params_loess[i]) %>%
group_by(sample_date) %>%
dplyr::summarise(daily_avg = mean(result))
}
yr_range <- paste(min(year(df$sample_date)), '-', max(year(df$sample_date)), sep = '')
yr_range_sub <- paste(subset_yr, '-', max(year(df$sample_date)), sep = '')
mo_range <- paste(month.abb[min(month(df$sample_date))], '-', month.abb[max(month(df$sample_date))], sep = '')
mo_range_sub <- mo_range
ts_object_full <- ts(df$daily_avg)
ts_object_sub <- df %>% filter(year(sample_date) >= subset_yr)
ts_object_sub <- ts(ts_object_sub$daily_avg)
#Printing the autocorrelation plots
jpeg(filename = paste(params_loess[i],'_acf_plot.jpg', sep='')
, width = 6.5, height = 8, units = 'in', res = 300)
par(mfrow = c(2, 1))
acf(ts_object_full)
acf(ts_object_sub)
dev.off()
#from Kendall package
x <- mk.test(ts_object_full)
y <- mk.test(ts_object_sub)
#Warning from 'trend' package documentation:
##Current Version is for complete observations only.
x_sen <- sens.slope(ts_object_full)
y_sen <- sens.slope(ts_object_sub)
df_mk_results[i, ] <- c(params_loess[i], yr_range, mo_range, x$taug, x$pvalue
, x_sen$b.sen, x_sen$b.sen.lo, x_sen$b.sen.up)
df_mk_results[i + length(params_loess), ] <- c(params_loess[i], yr_range_sub, mo_range_sub, y$taug, y$pvalue
, y_sen$b.sen, y_sen$b.sen.lo, y_sen$b.sen.up)
}
df_mk_results$p_sig <- ifelse(df_mk_results$p_val_two_sided < 0.05
, 'significant', 'not significant')
write.csv(df_mk_results, '00_Mann-Kendall_Results_monotonic_Ramsey_Co_Corrected.csv')
setwd(wd_loess)
##Mann-Kendall test for monotonic trend
##WARNING: THIS DATA IS AUTOCORRELATED, SO M-K IS NOT THE APPROPRIATE TEST
#Dim a new vector
df_mk_results_seas <- data.frame(matrix(nrow = 2 * length(params_loess), ncol = 8))
names(df_mk_results_seas) <- c('parameter', 'time_period', 'month period', 'tau', 'p_val_two_sided'
, 'sens_slope', 'ci_lower', 'ci_upper')
for (i in 1:length(params_loess)) {
if(is.na(filter_vec[i])) {
df <- dat_loess %>%
filter(parameter == params_loess[i]
, month(sample_date) >= 5
, month(sample_date) <= 9) %>%
group_by(sample_date) %>%
dplyr::summarise(daily_avg = mean(result))
} else if(params_loess[i] == 'water_temperature_c_1') {
df <- dat_loess %>%
filter(parameter == 'water_temperature_c'
, epilimnetic_sample == 1
, sample_depth == 0
, month(sample_date) >= 5
, month(sample_date) <= 9) %>%
group_by(sample_date) %>%
dplyr::summarise(daily_avg = mean(result))
} else {
df <- dat_loess %>% filter(param_strata == params_loess[i]
, month(sample_date) >= 5
, month(sample_date) <= 9) %>%
group_by(sample_date) %>%
dplyr::summarise(daily_avg = mean(result))
}
yr_range <- paste(min(year(df$sample_date)), '-', max(year(df$sample_date)), sep = '')
yr_range_sub <- paste(subset_yr, '-', max(year(df$sample_date)), sep = '')
mo_range <- paste(month.abb[min(month(df$sample_date))], '-', month.abb[max(month(df$sample_date))], sep = '')
mo_range_sub <- mo_range
ts_object_full <- ts(df$daily_avg)
ts_object_sub <- df %>% filter(year(sample_date) >= subset_yr)
ts_object_sub <- ts(ts_object_sub$daily_avg)
#Printing the autocorrelation plots
jpeg(filename = paste('growing_season_', params_loess[i],'_acf_plot_Ramsey_Co_Corrected.jpg', sep='')
, width = 6.5, height = 8, units = 'in', res = 300)
par(mfrow = c(2, 1))
acf(ts_object_full)
acf(ts_object_sub)
dev.off()
#from Kendall package
x <- mk.test(ts_object_full)
y <- mk.test(ts_object_sub)
#Warning from 'trend' package documentation:
##Current Version is for complete observations only.
x_sen <- sens.slope(ts_object_full)
y_sen <- sens.slope(ts_object_sub)
df_mk_results_seas[i, ] <- c(params_loess[i], yr_range, mo_range, x$taug, x$pvalue
, x_sen$b.sen, x_sen$b.sen.lo, x_sen$b.sen.up)
df_mk_results_seas[i + length(params_loess), ] <- c(params_loess[i], yr_range_sub, mo_range_sub, y$taug, y$pvalue
, y_sen$b.sen, y_sen$b.sen.lo, y_sen$b.sen.up)
}
df_mk_results_seas$p_sig <- ifelse(df_mk_results$p_val_two_sided < 0.05
, 'significant', 'not significant')
write.csv(df_mk_results_seas, '00_Growing_Season_Mann-Kendall_Results_monotonic_Ramsey_Co_Corrected.csv')
install.packages('excel.link')
install.packages('RODBC')
?xl.read.file
library(excel.link)
?xl.read.file
wd_data <- c('W:\RICHCWA\WinModel\EFDC\RVAJR_Components\RVAJR_C01')
library(excel.link)
wd_data <- c('W:/RICHCWA/WinModel/EFDC/RVAJR_Components/RVAJR_C01')
file_name <- c('EFDC_export_120616-1150.xlsb')
setwd(wd_data)
df<-xl.read.file(filename ,header = TRUE, top.left.cell = "A10")
file_name <- c('EFDC_export_120616-1150.xlsb')
setwd(wd_data)
df<-xl.read.file(filename ,header = TRUE, top.left.cell = "A10")
df<-xl.read.file('EFDC_export_120616-1150.xlsb', header = TRUE, top.left.cell = "A10")
df<-xl.read.file(filename = 'EFDC_export_120616-1150.xlsb'
, xl.sheet = 'WWTP'
, header = TRUE
, top.left.cell = "A10")
View(df)
df_names <- xl.read.file(filename = 'EFDC_export_120616-1150.xlsb'
, xl.sheet = 'WWTP'
, header = FALSE
, top.left.cell = 'B4')
names(df) <- c(df_names[1, ])
View(df_names)
View(df)
setwd(wd_lookup)
wd_lookup <- c('W:/RICHCWA/WinModel/EFDC/R_Scripts')
setwd(wd_lookup)
lookup_station <- read.csv(file = 'WQ_Station_Lookup.csv', stringsAsFactors = F)
View(lookup_station)
library(tidyr)
View(df_names)
names(df)
lookup_station[ , 3]
setwd(wd_lookup)
lookup_station <- read.csv(file = 'WQ_Station_Lookup.csv', stringsAsFactors = F)
setwd(wd_data)
df_names <- xl.read.file(filename = 'EFDC_export_120616-1150.xlsb'
, xl.sheet = 'WWTP'
, header = FALSE
, top.left.cell = 'B4')
setwd(wd_data)
df_names <- xl.read.file(filename = 'EFDC_export_120616-1150.xlsb'
, xl.sheet = 'WWTP'
, header = FALSE
, top.left.cell = 'B4')
getwd()
wd_data <- c('W:/RICHCWA/WinModel/EFDC/RVAJR_Components/RVAJR_C01')
setwd(wd_data)
df_names <- xl.read.file(filename = 'EFDC_export_120616-1150.xlsb'
, xl.sheet = 'WWTP'
, header = FALSE
, top.left.cell = 'B4')
names(df) <- c(df_names[1, ])
names(df)
lookup_station[ , 3]
lookup_station[ , 1]
View(df)
names(df) <- c('datetime', df_names[1, ])
names(df)
lookup_station[ , 1]
names(df) <- c('datetime', lookup_station[ , 3])
View(df)
source('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Component_Analysis/00_Read_Component_Data.R')
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs')
df <- xl.read.file(filename = 'EFDC_export_120616-1150.xlsb'
, xl.sheet = 'WWTP'
, header = TRUE
, top.left.cell = 'A10')
#Wrapper for xl.read.file
read_in_files <-function(x, file_name){
xl.read.file(filename = file_name
, xl.sheet = x
, header = TRUE
, top.left.cell = 'A10')
}
data <- lapply(df_names, xl.read.file, file_name = 'EFDC_export_120616-1150.xlsb')
read_in_files <-function(x, file_name){
xl.read.file(filename = file_name
, xl.sheet = x
, header = TRUE
, top.left.cell = 'A10')
}
data <- lapply(df_names, read_in_files, file_name = 'EFDC_export_120616-1150.xlsb')
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'E. coli')
data <- lapply(df_names, read_in_files, file_name = 'EFDC_export_120616-1150.xlsb')
str(data)
names(data)
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'Ecoli')
names(data) <- df_names
str(data)
data <- lapply(data, setNames, nm = c('datetime', lookup_station[ , 3]))
str(data)
check <- do.call('rbind', data)
View(check)
?ldply
librayr(plyr)
library(plyr)
?ldply
check_again <- ldply(data)
View(check_again)
dat_complete <- ldply(data)
?ldply
dat_complete <- ldply(data, .id = component)
dat_complete <- ldply(data, .id = 'component')
View(dat_complete)
View(dat_complete)
dat_complete[dat_complete == 0] <- 0.001
View(dat_complete)
