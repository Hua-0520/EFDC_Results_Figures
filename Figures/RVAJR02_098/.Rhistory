counter <- 1
for(i in calc_vec){
tp_slope[counter] <- (hypo_phosphorus$avg_tp[i + 1] - hypo_phosphorus$avg_tp[i]) /
as.numeric(hypo_phosphorus$sample_date[i + 1] - hypo_phosphorus$sample_date[i])
srp_slope[counter] <- (hypo_phosphorus$avg_srp[i + 1] - hypo_phosphorus$avg_srp[i]) /
as.numeric(hypo_phosphorus$sample_date[i + 1] - hypo_phosphorus$sample_date[i])
thermocline_avg[counter] <- (hypo_phosphorus$thermocline_m[i + 1] + hypo_phosphorus$thermocline_m[i]) / 2
strat_period[counter] <- paste(hypo_phosphorus$sample_date[i], ' to '
, hypo_phosphorus$sample_date[i + 1], sep = '')
day_count[counter] <- as.numeric(hypo_phosphorus$sample_date[i + 1] - hypo_phosphorus$sample_date[i])
counter <- counter + 1
}
final <- data.frame(strat_period, day_count, thermocline_avg, tp_slope, srp_slope)
# #PLEASE NOTE: THIS IS A SEMI-MANUAL PROCESS DEVELOPED BASED ON THE RESULTS OF THE 'FINAL' DATAFRAME
# notes <- vector()
#
# for(i in 1:length(final$strat_period)){
#   if(is.na(final$thermocline_avg[i])){
#     notes[i] <- 'No thermocline data provided in original dataset'
#   }else if(is.na(final$tp_slope[i]) & is.na(final$srp_slope[i])){
#     notes[i] <- 'No TP/SRP data provided in original dataset'
#   }else if(is.na(final$srp_slope[i])){
#     notes[i] <- 'No SRP data provided in original dataset'
#
#   }else{
#     notes[i] <- NA
#   }
# }
# final$notes <- notes
setwd('C:/Users/jpadilla/Desktop/Anoxic_Sediment_P_Flux_Update_02-20-17')
write.csv(final, file = 'Anoxic_Sediment_P_Flux.csv', row.names = F)
View(strata_dat)
write.csv(strata_dat, file = 'Anoxic_Sediment_P_Data.csv', row.names = F)
#Libraries----------------------------------
library(excel.link); library(plyr); library(dplyr); library(ggplot2); library(tidyr); library(lubridate); library(stringr)
library(rattle); library(scales); library(forcats); library(gridExtra)
#Required Parameters------------------------
scenario_name <- c('RVAJR02_079')
component_scenario_name <- c('RVAJR_C01')
#Working directories------------------------
wd_script_src <- ('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Component_Analysis')
wd_efdc_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RICHCWA_Grid02/', scenario_name, sep = '')
wd_component_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RVAJR_Components/', component_scenario_name, sep = '')
#Parameters used in 00_Read_Component_Data_xlsb_Format.R
file_name_component <- c('EFDC_Template_Development_Data.xlsb')
rds_name_component <- paste(component_scenario_name, '_component_test_data.rds', sep = '')
sheet_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'Upstream', 'Ecoli')
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'Upstream', 'Ecoli')
#Parameters used in 00_Read_EFDC_Data_xlsb_Format.R
file_name_efdc <- c('EFDC_export_011917-1631.xlsb')
rds_name_efdc <- paste(scenario_name, '.rds', sep = '')
#Parameters used in Downstream_Boundary_STV.R
##None
#Run---------------------------------------
#Load results from normal EFDC run that go with the component data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_efdc_data_src)
if(file.exists(rds_name_efdc)){
dat_efdc <- readRDS(file = rds_name_efdc)
}else{
setwd(wd_script_src)
source('01_Read_EFDC_Data_xlsb_Format.R')
}
#Load Component Data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_component_data_src)
if(file.exists(rds_name_component)){
dat_complete <- readRDS(file = rds_name_component)
}else{
setwd(wd_script_src)
source('01_Read_Component_Data_xlsb_Format.R')
}
#Prep EFDC results for inclusion into the WQSs
setwd(wd_script_src)
source('02_Summarize_EFDC_Output.R')
#Format data---------------------------------------------------
dat <- dat_efdc %>% select(1,6)
names(dat) <- normVarNames(names(dat))
dat$year_month <- with(dat, paste(year(datetime), '-'
, str_pad(month(datetime), width = 2, side = 'left', pad = '0')
, sep = ''))
#Calculate which months violate the STV standard---------------
dat_monthly_stv_std_efdc <- dat %>%
group_by(year_month) %>%
dplyr::summarise(ct = n(), gtr_235_ct = sum(downstream_boundary > 235)) %>%
mutate(perc_235_violation_efdc = gtr_235_ct / ct * 100) %>%
select(year_month, perc_235_violation_efdc)
#temporary addition (17 months)
# dat_stv_check <- dat_monthly_stv_std_efdc %>% filter(perc_235_violation > 10)
#Calculate which months violate the geometric mean standard-----
dat_monthly_geomean_efdc <- dat %>% group_by(datetime) %>%
mutate(ln_total = log(downstream_boundary))
dat_monthly_geomean_efdc <- dat_monthly_geomean_efdc %>% group_by(year_month) %>%
dplyr::summarise(total_efdc = exp(mean(ln_total)))
#temporary addition (4 months)
# dat_geomean_check <- dat_monthly_geomean_efdc %>% filter(total > 126)
#Remove the source data after calculating WQSs
rm(dat)
View(dat_monthly_geomean_efdc)
check <- dat_monthly_geomean_efdc %>% filter(total_efdc > 126)
View(check)
check <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(yer_month) %>%
dplyr::summarise(ct_above_std = 126 - total_efdc)
check <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(year_month) %>%
dplyr::summarise(ct_above_std = 126 - total_efdc)
View(check)
check <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(year_month) %>%
dplyr::summarise(ct_above_std = total_efdc - 126)
sum(check$ct_above_std)
pct_improvement_metric < -sum(check$ct_above_std)
pct_improvement_metric <- sum(check$ct_above_std)
pct_improve_metric <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(year_month) %>%
dplyr::summarise(ct_above_std = total_efdc - 126)
pct_improvement_metric <- sum(check$ct_above_std)
pct_improvement_metric <- sum(pct_improvement_metric$ct_above_std)
pct_improve_metric <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(year_month) %>%
dplyr::summarise(ct_above_std = total_efdc - 126)
pct_improvement_metric <- sum(pct_improvement_metric$ct_above_std)
pct_improve_metric <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(year_month) %>%
dplyr::summarise(ct_above_std = total_efdc - 126)
pct_improvement_metric <- sum(pct_improvement_metric$ct_above_std)
pct_improvement_metric_cfu <- sum(pct_improvement_metric$ct_above_std)
pct_improve_metric <- dat_monthly_geomean_efdc %>%
filter(total_efdc > 126) %>%
group_by(year_month) %>%
dplyr::summarise(ct_above_std = total_efdc - 126)
pct_improvement_metric_cfu <- sum(pct_improve_metric$ct_above_std)
wd_print <- paste('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Figures/'
, scenario_name, sep = '')
setwd(wd_print)
write.csv(pct_improvement_metric_cfu, file = paste(scenario_name, '_total_CFU_from_GEOMEAN_standard.csv', row.names = F))
getwd
getwd()
setwd(wd_print)
write.csv(pct_improvement_metric_cfu, file = paste(scenario_name, '_total_CFU_from_GEOMEAN_standard.csv'
sep = ''), row.names = F)
write.csv(pct_improvement_metric_cfu, file = paste(scenario_name, '_total_CFU_from_GEOMEAN_standard.csv'
, sep = ''), row.names = F)
#Libraries----------------------------------
library(excel.link); library(plyr); library(dplyr); library(ggplot2); library(tidyr); library(lubridate); library(stringr)
library(rattle); library(scales); library(forcats); library(gridExtra)
#Required Parameters------------------------
scenario_name <- c('RVAJR02_096')
component_scenario_name <- c('RVAJR_C04')
#Working directories------------------------
wd_script_src <- ('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Component_Analysis')
wd_efdc_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RICHCWA_Grid02/', scenario_name, sep = '')
wd_component_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RVAJR_Components/', component_scenario_name, sep = '')
#Parameters used in 00_Read_Component_Data_xlsb_Format.R
file_name_component <- c('EFDC_export_021317-0810.xlsb')
rds_name_component <- paste(component_scenario_name, '.rds', sep = '')
sheet_names <- c('RVAJR_C04 (WWTP)', 'RVAJR_C04 (Unknown)'
, 'RVAJR_C04 (Stormwater)', 'RVAJR_C04 (CSOs)'
, 'RVAJR_C04 (Upstream)')
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'Upstream')
#Parameters used in 00_Read_EFDC_Data_xlsb_Format.R
file_name_efdc <- c('EFDC_export_020917-1308.xlsb')
rds_name_efdc <- paste(scenario_name, '.rds', sep = '')
#Parameters used in Downstream_Boundary_STV.R
##None
#Run---------------------------------------
#Load results from normal EFDC run that go with the component data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_efdc_data_src)
if(file.exists(rds_name_efdc)){
dat_efdc <- readRDS(file = rds_name_efdc)
}else{
setwd(wd_script_src)
source('01_Read_EFDC_Data_xlsb_Format.R')
}
#Load Component Data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_component_data_src)
if(file.exists(rds_name_component)){
dat_complete <- readRDS(file = rds_name_component)
}else{
setwd(wd_script_src)
source('01_Read_Component_Data_xlsb_Format.R')
}
#Prep EFDC results for inclusion into the WQSs
setwd(wd_script_src)
source('02_Summarize_EFDC_Output.R')
#Print STV plot
setwd(wd_script_src)
source('03_Downstream_Boundary_STV.R')
#Print Geomean plot
setwd(wd_script_src)
source('03_Downstream_Boundary_GEOMEAN.R')
#Working directories-----------------
wd_print <- paste('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Figures/'
, scenario_name, sep = '')
#Parameters--------------------------
plot_name <- paste(scenario_name, '_GEOMEAN_Component_Plot.png', sep = '')
#Data munging------------------------
dat <- dat_complete %>% select(1:2, 7)
dat$year_month <- with(dat_complete, paste(year(datetime), '-'
, str_pad(month(datetime), width = 2, side = 'left', pad = '0')
, sep = ''))
names(dat) <- normVarNames(names(dat))
#Spread and transform data
dat_monthly <- spread(dat, component, downstream_boundary)
dat_monthly <- if('Ecoli' %in% colnames(dat_monthly)){dat_monthly %>% select(-Ecoli)}
names(dat_monthly) <- normVarNames(names(dat_monthly))
dat_monthly$total <- rowSums(dat_monthly[ , 3:7])
dat_monthly <- dat_monthly %>% group_by(datetime) %>%
mutate(ln_total =log(total)
, ln_wwtp = log(total - wwtp)
, ln_unknown = log(total - unknown)
, ln_stormwater = log(total - stormwater)
, ln_csos = log(total - csos)
, ln_upstream = log(total - upstream))
dat_monthly <- dat_monthly %>% group_by(year_month) %>%
dplyr::summarise(total = exp(mean(ln_total))
, wwtp = exp(mean(ln_wwtp))
, unknown = exp(mean(ln_unknown))
, stormwater = exp(mean(ln_stormwater))
, csos = exp(mean(ln_csos))
, upstream = exp(mean(ln_upstream)))
dat_year_mo <- data.frame(year_month = dat_monthly[ , 1])
# #Replacing component total results with EFDC results
dat_monthly <- left_join(dat_monthly, dat_monthly_geomean_efdc)
dat_monthly <- dat_monthly %>% select(1:2, 8, 3:7)
#Filter for total_efdc > 126, but use the component total for the calculation
dat_plot <- dat_monthly %>%
filter(total_efdc > 126) %>%
mutate(upstream = (total - upstream) / total
, csos = (total - csos) / total
, stormwater = (total - stormwater) / total
, unknown = (total - unknown) / total
, wwtp = (total - wwtp) / total)
names(dat_plot)[3] <- c('total_geomean')
dat_plot$total <- rowSums(dat_plot[ , 4:8])
dat_plot <- dat_plot %>%
mutate(upstream = upstream / total * 100
, csos = csos / total * 100
, stormwater = stormwater / total * 100
, unknown = unknown / total * 100
, wwtp = wwtp / total * 100) %>%
left_join(dat_year_mo, .) %>%
select(year_month, upstream, csos, stormwater, unknown, wwtp, -total_geomean, -total) %>%
gather(., component, perc_contribution, 2:6)
#Add and rename a few factor fields
dat_plot[, 4:5] <- lapply(dat_plot[, 1:2], as.factor)
names(dat_plot)[4:5] <- c('year_mo_fac', 'component_fac')
#Reorder factor levels for components
dat_plot$component_fac <- fct_relevel(dat_plot$component_fac, 'wwtp'
, 'unknown', 'stormwater'
, 'csos', 'upstream')
leg_labels <- c('Upstream', 'CSOs', 'Stormwater', 'Background', 'WWTP') %>% rev(.)
leg_colors <- c('#80B1D3', '#FB8072', '#8DD3C7', '#BEBADA', '#FFFFB3') %>% rev(.)
#Plot!-------------------------------
#Exceedance plot
x <- ggplot(dat_monthly, aes(x = factor(year_month), y = total_efdc)) +
geom_bar(stat = 'identity', fill = 'black') +
geom_hline(yintercept = 126, color = 'red') +
scale_y_continuous(labels = comma, expand = c(0, 0), limits = c(0, 250)) +
labs(x = '', y = 'E. coli Geometric Mean \n(CFU/100mL)') +
theme_bw() +
theme(strip.background = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5, vjust = 0.5)) +
theme(panel.grid = element_blank()) +
theme(plot.margin=unit(c(10, 8, 0, 8), 'pt')) #TRBL
#Percent contribution plot
xx <- ggplot(dat_plot, aes(x = year_mo_fac, y = perc_contribution, fill = component_fac)) +
geom_bar(stat = 'identity') +
scale_y_continuous(labels = comma, expand = c(0, 0)) +
scale_color_manual(values = leg_colors, labels = leg_labels) +
scale_fill_manual(values = leg_colors, labels = leg_labels) +
labs(x = 'Year-Month', y = 'Percent Contribution \nto Geometric Mean') +
guides(fill = guide_legend(nrow = 1, reverse=T)
, color = guide_legend(nrow = 1, reverse=T)) +
theme_bw() +
theme(legend.title = element_blank()
, legend.position = 'top'
, legend.key.size = unit(0.2, 'in')) +
theme(strip.background = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5, vjust = 0.5)) +
theme(panel.grid = element_blank())+
theme(plot.margin=unit(c(-8, 8, 8, 8), 'pt')) #TRBL
plot_geomean <- grid.arrange(x, xx, ncol = 1)
setwd(wd_print)
ggsave(filename = plot_name, plot = plot_geomean, width = 6, height = 6, units = 'in')
#Printing which months violate the std to txt------------------------------
geomean_violations <- dat_plot %>% filter(!is.na(perc_contribution))
geomean_violations <- unique(geomean_violations$year_month)
setwd(wd_print)
write.table(geomean_violations, file = paste(scenario_name, '_GEOMEAN_Standard_Violations.txt', sep = '')
, quote = F
, row.names = F
, col.names = F)
names(dat_monthly) <- normVarNames(names(dat_monthly))
if('Ecoli' %in% colnames(dat_monthly)){dat_monthly %>% select(-Ecoli)}
names(dat_monthly) <- normVarNames(names(dat_monthly))
dat_monthly$total <- rowSums(dat_monthly[ , 3:7])
#Working directories-----------------
wd_print <- paste('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Figures/'
, scenario_name, sep = '')
#Parameters--------------------------
plot_name <- paste(scenario_name, '_GEOMEAN_Component_Plot.png', sep = '')
#Data munging------------------------
dat <- dat_complete %>% select(1:2, 7)
dat$year_month <- with(dat_complete, paste(year(datetime), '-'
, str_pad(month(datetime), width = 2, side = 'left', pad = '0')
, sep = ''))
names(dat) <- normVarNames(names(dat))
#Spread and transform data
dat_monthly <- spread(dat, component, downstream_boundary)
if('Ecoli' %in% colnames(dat_monthly)){dat_monthly %>% select(-Ecoli)}
names(dat_monthly) <- normVarNames(names(dat_monthly))
dat_monthly$total <- rowSums(dat_monthly[ , 3:7])
dat_monthly <- dat_monthly %>% group_by(datetime) %>%
mutate(ln_total =log(total)
, ln_wwtp = log(total - wwtp)
, ln_unknown = log(total - unknown)
, ln_stormwater = log(total - stormwater)
, ln_csos = log(total - csos)
, ln_upstream = log(total - upstream))
dat_monthly <- dat_monthly %>% group_by(year_month) %>%
dplyr::summarise(total = exp(mean(ln_total))
, wwtp = exp(mean(ln_wwtp))
, unknown = exp(mean(ln_unknown))
, stormwater = exp(mean(ln_stormwater))
, csos = exp(mean(ln_csos))
, upstream = exp(mean(ln_upstream)))
dat_year_mo <- data.frame(year_month = dat_monthly[ , 1])
# #Replacing component total results with EFDC results
dat_monthly <- left_join(dat_monthly, dat_monthly_geomean_efdc)
dat_monthly <- dat_monthly %>% select(1:2, 8, 3:7)
#Filter for total_efdc > 126, but use the component total for the calculation
dat_plot <- dat_monthly %>%
filter(total_efdc > 126) %>%
mutate(upstream = (total - upstream) / total
, csos = (total - csos) / total
, stormwater = (total - stormwater) / total
, unknown = (total - unknown) / total
, wwtp = (total - wwtp) / total)
names(dat_plot)[3] <- c('total_geomean')
dat_plot$total <- rowSums(dat_plot[ , 4:8])
dat_plot <- dat_plot %>%
mutate(upstream = upstream / total * 100
, csos = csos / total * 100
, stormwater = stormwater / total * 100
, unknown = unknown / total * 100
, wwtp = wwtp / total * 100) %>%
left_join(dat_year_mo, .) %>%
select(year_month, upstream, csos, stormwater, unknown, wwtp, -total_geomean, -total) %>%
gather(., component, perc_contribution, 2:6)
#Add and rename a few factor fields
dat_plot[, 4:5] <- lapply(dat_plot[, 1:2], as.factor)
names(dat_plot)[4:5] <- c('year_mo_fac', 'component_fac')
#Reorder factor levels for components
dat_plot$component_fac <- fct_relevel(dat_plot$component_fac, 'wwtp'
, 'unknown', 'stormwater'
, 'csos', 'upstream')
leg_labels <- c('Upstream', 'CSOs', 'Stormwater', 'Background', 'WWTP') %>% rev(.)
leg_colors <- c('#80B1D3', '#FB8072', '#8DD3C7', '#BEBADA', '#FFFFB3') %>% rev(.)
#Plot!-------------------------------
#Exceedance plot
x <- ggplot(dat_monthly, aes(x = factor(year_month), y = total_efdc)) +
geom_bar(stat = 'identity', fill = 'black') +
geom_hline(yintercept = 126, color = 'red') +
scale_y_continuous(labels = comma, expand = c(0, 0), limits = c(0, 250)) +
labs(x = '', y = 'E. coli Geometric Mean \n(CFU/100mL)') +
theme_bw() +
theme(strip.background = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5, vjust = 0.5)) +
theme(panel.grid = element_blank()) +
theme(plot.margin=unit(c(10, 8, 0, 8), 'pt')) #TRBL
#Percent contribution plot
xx <- ggplot(dat_plot, aes(x = year_mo_fac, y = perc_contribution, fill = component_fac)) +
geom_bar(stat = 'identity') +
scale_y_continuous(labels = comma, expand = c(0, 0)) +
scale_color_manual(values = leg_colors, labels = leg_labels) +
scale_fill_manual(values = leg_colors, labels = leg_labels) +
labs(x = 'Year-Month', y = 'Percent Contribution \nto Geometric Mean') +
guides(fill = guide_legend(nrow = 1, reverse=T)
, color = guide_legend(nrow = 1, reverse=T)) +
theme_bw() +
theme(legend.title = element_blank()
, legend.position = 'top'
, legend.key.size = unit(0.2, 'in')) +
theme(strip.background = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5, vjust = 0.5)) +
theme(panel.grid = element_blank())+
theme(plot.margin=unit(c(-8, 8, 8, 8), 'pt')) #TRBL
plot_geomean <- grid.arrange(x, xx, ncol = 1)
setwd(wd_print)
ggsave(filename = plot_name, plot = plot_geomean, width = 6, height = 6, units = 'in')
#Printing which months violate the std to txt------------------------------
geomean_violations <- dat_plot %>% filter(!is.na(perc_contribution))
geomean_violations <- unique(geomean_violations$year_month)
setwd(wd_print)
write.table(geomean_violations, file = paste(scenario_name, '_GEOMEAN_Standard_Violations.txt', sep = '')
, quote = F
, row.names = F
, col.names = F)
#Libraries----------------------------------
library(excel.link); library(plyr); library(dplyr); library(ggplot2); library(tidyr); library(lubridate); library(stringr)
library(rattle); library(scales); library(forcats); library(gridExtra)
#Required Parameters------------------------
scenario_name <- c('RVAJR02_097')
component_scenario_name <- c('RVAJR_C03')
#Working directories------------------------
wd_script_src <- ('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Component_Analysis')
wd_efdc_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RICHCWA_Grid02/', scenario_name, sep = '')
wd_component_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RVAJR_Components/', component_scenario_name, sep = '')
#Parameters used in 00_Read_Component_Data_xlsb_Format.R
file_name_component <- c('EFDC_export_021717-0827.xlsb')
rds_name_component <- paste(component_scenario_name, '.rds', sep = '')
sheet_names <- c('RVAJR_C05 (WWTP)', 'RVAJR_C05 (Unknown)'
, 'RVAJR_C05 (Stormwater)', 'RVAJR_C05 (CSOs)'
, 'RVAJR_C05 (Upstream)', 'RVAJR_C05 (E. coli)')
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'Upstream', 'Ecoli')
#Parameters used in 00_Read_EFDC_Data_xlsb_Format.R
file_name_efdc <- c('EFDC_export_020917-1308.xlsb')
rds_name_efdc <- paste(scenario_name, '.rds', sep = '')
#Parameters used in Downstream_Boundary_STV.R
##None
#Run---------------------------------------
#Load results from normal EFDC run that go with the component data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_efdc_data_src)
if(file.exists(rds_name_efdc)){
dat_efdc <- readRDS(file = rds_name_efdc)
}else{
setwd(wd_script_src)
source('01_Read_EFDC_Data_xlsb_Format.R')
}
#Load Component Data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_component_data_src)
if(file.exists(rds_name_component)){
dat_complete <- readRDS(file = rds_name_component)
}else{
setwd(wd_script_src)
source('01_Read_Component_Data_xlsb_Format.R')
}
#Prep EFDC results for inclusion into the WQSs
setwd(wd_script_src)
source('02_Summarize_EFDC_Output.R')
#Print STV plot
setwd(wd_script_src)
source('03_Downstream_Boundary_STV.R')
#Print Geomean plot
setwd(wd_script_src)
source('03_Downstream_Boundary_GEOMEAN.R')
#Libraries----------------------------------
library(excel.link); library(plyr); library(dplyr); library(ggplot2); library(tidyr); library(lubridate); library(stringr)
library(rattle); library(scales); library(forcats); library(gridExtra)
#Required Parameters------------------------
scenario_name <- c('RVAJR02_098')
component_scenario_name <- c('RVAJR_C06')
#Working directories------------------------
wd_script_src <- ('W:/RICHCWA/WinModel/EFDC/R_Scripts/EFDC_Results_Figures/Component_Analysis')
wd_efdc_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RICHCWA_Grid02/', scenario_name, sep = '')
wd_component_data_src <- paste('W:/RICHCWA/WinModel/EFDC/RVAJR_Components/', component_scenario_name, sep = '')
#Parameters used in 00_Read_Component_Data_xlsb_Format.R
file_name_component <- c('EFDC_export_021717-0829.xlsb')
rds_name_component <- paste(component_scenario_name, '.rds', sep = '')
sheet_names <- c('RVAJR_C06 (WWTP)', 'RVAJR_C06 (Unknown)'
, 'RVAJR_C06 (Stormwater)', 'RVAJR_C06 (CSOs)'
, 'RVAJR_C06 (Upstream)')
df_names <- c('WWTP', 'Unknown', 'Stormwater', 'CSOs', 'Upstream')
#Parameters used in 00_Read_EFDC_Data_xlsb_Format.R
file_name_efdc <- c('EFDC_export_020917-1309.xlsb')
rds_name_efdc <- paste(scenario_name, '.rds', sep = '')
#Parameters used in Downstream_Boundary_STV.R
##None
#Run---------------------------------------
#Load results from normal EFDC run that go with the component data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_efdc_data_src)
if(file.exists(rds_name_efdc)){
dat_efdc <- readRDS(file = rds_name_efdc)
}else{
setwd(wd_script_src)
source('01_Read_EFDC_Data_xlsb_Format.R')
}
#Load Component Data
#Check if a faster loading RDS file exists, if not then load from xlsb format
setwd(wd_component_data_src)
if(file.exists(rds_name_component)){
dat_complete <- readRDS(file = rds_name_component)
}else{
setwd(wd_script_src)
source('01_Read_Component_Data_xlsb_Format.R')
}
#Prep EFDC results for inclusion into the WQSs
setwd(wd_script_src)
source('02_Summarize_EFDC_Output.R')
#Print STV plot
setwd(wd_script_src)
source('03_Downstream_Boundary_STV.R')
#Print Geomean plot
setwd(wd_script_src)
source('03_Downstream_Boundary_GEOMEAN.R')
